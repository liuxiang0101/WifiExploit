package com.mine.wifiexploit.adapter;

import android.content.Context;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.mine.wifiexploit.R;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * WiFi列表界面Adapter
 */
public class WifiListAdapter extends BaseAdapter {
    private Context context;
    public List<ScanResult> wifiList;               //扫描到附近的wifi的列表(排序后)
    private WifiInfo wifiInfo;                      //当前连接的wifi的信息
    private Map<String, Integer> connectedWifiMap;  //存储已连接过的wifi的SSID与networkID

    public WifiListAdapter(Context context, WifiInfo wifiInfo, List<ScanResult> wifiList, List<WifiConfiguration> connectedWifiList) {
        this.context = context;
        this.wifiList = new ArrayList<>();
        //获取当前连接wifi的信息
        this.wifiInfo = wifiInfo;
//        //获取扫描到的wifi的信息
//        this.wifiList = wifiList;

        //从已连接过得wifi的信息中摘取SSID和networkId
        connectedWifiMap = new HashMap<>();
        for (WifiConfiguration obj : connectedWifiList) {
            connectedWifiMap.put(obj.SSID.replace("\"", ""), obj.networkId);
        }

        //将扫描到的附近的wifi列表进行排序
        for (ScanResult result : wifiList) {//1.当前已连接wifi搁至首位
            if (wifiInfo.getBSSID().equals(result.BSSID)) {
                if (!this.wifiList.contains(result))
                    this.wifiList.add(result);
            }
        }
        for (ScanResult result : wifiList) {//2.已经有过连接记录且存在于扫描列表中的wifi顺序往后排
            if (connectedWifiMap.containsKey(result.SSID)) {
                if (!this.wifiList.contains(result))
                    this.wifiList.add(result);
            }
        }
        for (ScanResult result : wifiList) {//3.其他的wifi依次放在后面
            if (!this.wifiList.contains(result))
                this.wifiList.add(result);
        }
    }

    @Override
    public int getCount() {
        return wifiList.size();
    }

    @Override
    public Object getItem(int position) {
        return wifiList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder viewHolder;
        final ScanResult result = wifiList.get(position);
//        if (result.SSID == null || result.SSID.equals("")) return null;
        if (convertView == null) {
            convertView = View.inflate(context, R.layout.item_wifi_list, null);
            viewHolder = new ViewHolder();
            viewHolder.tv_wifi_name = (TextView) convertView.findViewById(R.id.tv_wifi_name);
            viewHolder.tv_wifi_state = (TextView) convertView.findViewById(R.id.tv_wifi_state);
            viewHolder.iv_wifi = (ImageView) convertView.findViewById(R.id.iv_wifi);
            convertView.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) convertView.getTag();
        }
        //显示网络名称
        viewHolder.tv_wifi_name.setText(result.SSID);
        viewHolder.tv_wifi_state.setText("");


        final boolean isSavedPassword = connectedWifiMap.containsKey(result.SSID);
        if (isSavedPassword) viewHolder.tv_wifi_state.setText("已保存");


        //判断连接的网络是否需要密码
        boolean isLocked = true;
        String capabilities = result.capabilities;
        if (capabilities != null)
            if (capabilities.trim().equals("") || capabilities.equals("[ESS]"))
                isLocked = false;
        switch (WifiManager.calculateSignalLevel(result.level, 5)) {
            case 0:
                viewHolder.iv_wifi.setImageResource(isLocked ? R.drawable.locked_level_5 : R.drawable.unlocked_level_5);
                break;
            case 1:
                viewHolder.iv_wifi.setImageResource(isLocked ? R.drawable.locked_level_4 : R.drawable.unlocked_level_4);
                break;
            case 2:
                viewHolder.iv_wifi.setImageResource(isLocked ? R.drawable.locked_level_3 : R.drawable.unlocked_level_3);
                break;
            case 3:
                viewHolder.iv_wifi.setImageResource(isLocked ? R.drawable.locked_level_2 : R.drawable.unlocked_level_2);
                break;
            case 4:
                viewHolder.iv_wifi.setImageResource(isLocked ? R.drawable.locked_level_1 : R.drawable.unlocked_level_1);
                break;
        }
        if (wifiInfo.getBSSID().equals(result.BSSID)) {
            viewHolder.tv_wifi_state.setText("已连接");
            viewHolder.iv_wifi.setImageResource(R.drawable.work_ok);
        }

//        convertView.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                if (isSavedPassword) {//已经存储过密码的网络再次连接
//                    int networkId = connectedWifiMap.get(result.SSID);
//                    wifiManager.enableNetwork(networkId, true);
//                    wifiManager.saveConfiguration();
//                    wifiManager.reconnect();
//                } else {
//                    final EditText et = new EditText(context);
//                    new AlertDialog.Builder(context).setTitle(result.SSID)
//                            .setIcon(android.R.drawable.ic_dialog_info)
//                            .setView(et)
//                            .setPositiveButton("连接", new DialogInterface.OnClickListener() {
//                                public void onClick(DialogInterface dialog, int which) {
//                                    String password = et.getText().toString();
//                                    if (password.length() > 7) {
//                                        addNetWork(createWifiInfo(result.SSID, password, 3));
//                                    } else {
//                                        Toast.makeText(context, "输入的密码不能小于8位", Toast.LENGTH_SHORT).show();
//                                    }
//                                }
//                            })
//                            .setNegativeButton("取消", null)
//                            .show();
//                }
//            }
//        });
        return convertView;
    }

    private class ViewHolder {
        ImageView iv_wifi;
        TextView tv_wifi_name;
        TextView tv_wifi_state;
    }
}
package com.mine.wifiexploit.activity;

import android.Manifest;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.AdapterView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.mine.wifiexploit.R;
import com.mine.wifiexploit.adapter.WifiListAdapter;

import java.util.List;

public class MainActivity extends AppCompatActivity {
    private TextView tv_wifi;                   //WIFI此时开关状态
    private ListView lv_wifi_list;              //展示搜索到的WIFI列表
    private LinearLayout ll_top;                //WIFI的控制开关点击区域
    private LinearLayout ll_switch_mark;        //显示wifi是否处于开与关之间的切换状态

    private WifiInfo wifiInfo;                          //当前已连接WIFI的配置信息
    private List<ScanResult> mScanWifiList;             //设备硬件扫描出的附近WIFI的信息列表
    private List<WifiConfiguration> connectedWifiList;  //已经有过连接记录的WIFI列表
    private WifiManager wifiManager;
    private WifiIsOpenReceiver mWifiIsOpenReceiver;
    private WifiListAdapter mWifiListAdapter;

    private int mCurrentWifiState = 1;          //当前wifi状态,默认为已关闭
    private boolean isWifiSwitching = false;    //当前wifi是否处于切换过程中
    private static final int REQUEST_PERMISSION_CAMERA_CODE = 1;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_wifi_list);

        //6.0以上系统要获取扫描wifi列表，需要定位权限，需要手动赋予权限，否则无法获取wifi信息
        if (!(ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_COARSE_LOCATION) == PackageManager.PERMISSION_GRANTED)) {
            if (ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_COARSE_LOCATION)) {
                Toast.makeText(this, "Please grant the permission this time", Toast.LENGTH_LONG).show();
            }
            requestPermission();
        }

        initLogic();
        createWifiStateReceiver();
        if (isWiFiActive()) {
            tv_wifi.setText("[开启]");
            mCurrentWifiState = WifiManager.WIFI_STATE_ENABLED;
        } else {
            tv_wifi.setText("[关闭]");
            mCurrentWifiState = WifiManager.WIFI_STATE_DISABLED;
        }

    }

    //请求多个权限
    private void requestPermission() {
        ActivityCompat.requestPermissions(this,
                new String[]{Manifest.permission.ACCESS_COARSE_LOCATION,
                        Manifest.permission.ACCESS_FINE_LOCATION,
                        Manifest.permission.ACCESS_LOCATION_EXTRA_COMMANDS}
                , REQUEST_PERMISSION_CAMERA_CODE);
    }

    private void initLogic() {
        //获取控件
        tv_wifi = (TextView) findViewById(R.id.tv_wifi);
        ll_top = (LinearLayout) findViewById(R.id.ll_top);
        lv_wifi_list = (ListView) findViewById(R.id.lv_wifi_list);
        ll_switch_mark = (LinearLayout) findViewById(R.id.ll_switch_mark);
        //获取wifiManager
        wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        //wifi开关点击事件
        ll_top.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isWifiSwitching) {
                    Toast.makeText(MainActivity.this, "正在切换...", Toast.LENGTH_SHORT).show();
                    return;
                }
                if (isWiFiActive()) {
                    Toast.makeText(MainActivity.this, "正在关闭WIFI", Toast.LENGTH_SHORT).show();
                    wifiManager.setWifiEnabled(false);
                } else {
                    Toast.makeText(MainActivity.this, "正在打开WIFI", Toast.LENGTH_SHORT).show();
                    wifiManager.setWifiEnabled(true);
                }
                isWifiSwitching = true;
            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        if (mCurrentWifiState == WifiManager.WIFI_STATE_ENABLED)
            refreshWifiList();
    }

    /**
     * 注册广播，接收wifi开和关的状态
     */
    private void createWifiStateReceiver() {
        //1.创建广播接收者对象
        mWifiIsOpenReceiver = new WifiIsOpenReceiver();
        //2.创建intent-filter对象
        IntentFilter filter = new IntentFilter();
        filter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION); //wifi状态，是否连上，密码
//        filter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION); //网络状态变化
//        filter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);
//        filter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION);//是不是正在获得IP地址
//        filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
        //3.注册广播接收者
        registerReceiver(mWifiIsOpenReceiver, filter);
    }

    /**
     * 判断当前wifi是否连接
     */
    private boolean isWiFiActive() {
        ConnectivityManager connectivity = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
        if (connectivity != null) {
            NetworkInfo[] networkInfos = connectivity.getAllNetworkInfo();
            if (networkInfos != null) {
                for (NetworkInfo ni : networkInfos) {
                    if (ni.getTypeName().equals("WIFI") && ni.isConnected()) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * 刷新扫描到的周围wifi
     */
    private void refreshWifiList() {
        wifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        wifiInfo = wifiManager.getConnectionInfo();
        mScanWifiList = wifiManager.getScanResults();
        connectedWifiList = wifiManager.getConfiguredNetworks();
//        if (mWifiListAdapter == null) {
        mWifiListAdapter = new WifiListAdapter(this, wifiInfo, mScanWifiList, connectedWifiList);
        mScanWifiList = mWifiListAdapter.wifiList;
        lv_wifi_list.setAdapter(mWifiListAdapter);
//        } else {
//            mWifiListAdapter.notifyDataSetChanged();
//        }
        lv_wifi_list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Intent intent = new Intent();
                intent.setClass(MainActivity.this, WifiInfoActivity.class);
                if (wifiInfo.getBSSID().equals(mScanWifiList.get(position).BSSID))
                    intent.putExtra("isConnect", true);
                intent.putExtra("wifi_info", mScanWifiList.get(position));
                startActivity(intent);
            }
        });
        lv_wifi_list.setVisibility(View.VISIBLE);
        ll_switch_mark.setVisibility(View.GONE);
    }

    private void switchWifiState() {
        ll_switch_mark.setVisibility(View.VISIBLE);
        lv_wifi_list.setVisibility(View.GONE);
    }

    private void closeWifiFinish() {
        ll_switch_mark.setVisibility(View.GONE);
        lv_wifi_list.setVisibility(View.GONE);
    }

    /**
     * 用于监听wifi是否打开
     */
    class WifiIsOpenReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (WifiManager.WIFI_STATE_CHANGED_ACTION.equals(action)) {
                //获取当前的wifi状态int类型数据
                mCurrentWifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, 0);
                switch (mCurrentWifiState) {
                    case WifiManager.WIFI_STATE_ENABLED://WIFI已打开
                        wifiManager.startScan();
                        afterWifiOpen();
                        break;
                    case WifiManager.WIFI_STATE_ENABLING://WIFI打开中
                        switchWifiState();
                        break;
                    case WifiManager.WIFI_STATE_DISABLED://WIFI已关闭
                        closeWifiFinish();
                        tv_wifi.setText("[关闭]");
                        isWifiSwitching = false;
                        break;
                    case WifiManager.WIFI_STATE_DISABLING://WIFI关闭中
                        switchWifiState();
                        break;
                    case WifiManager.WIFI_STATE_UNKNOWN://WIFI状态未知
                        Toast.makeText(MainActivity.this, "WIFI状态错误,请退出重试", Toast.LENGTH_SHORT).show();
                        break;
                }
            }
        }
    }

    private void afterWifiOpen() {
        if (wifiManager.getScanResults().size() < 1) {
            lv_wifi_list.postDelayed(new Runnable() {
                @Override
                public void run() {
                    afterWifiOpen();
                }
            }, 1000);
        } else {
            refreshWifiList();
            tv_wifi.setText("[开启]");
            isWifiSwitching = false;
        }
    }

    @Override
    protected void onDestroy() {
        unregisterReceiver(mWifiIsOpenReceiver);
        super.onDestroy();
    }
}

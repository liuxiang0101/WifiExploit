package com.mine.wifiexploit.activity;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.ScanResult;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.mine.wifiexploit.R;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by Administrator on 2017/11/7.
 */
public class WifiInfoActivity extends Activity {
    private ImageView iv_wifi_level;
    private TextView tv_wifi_name;
    private TextView tv_wifi_connect1;
    private TextView tv_wifi_connect2;
    private TextView tv_wifi_password;
    private LinearLayout ll_wifi_connect;
    private LinearLayout ll_wifi_forget;
    private LinearLayout ll_password;

    private ScanResult scanResult;
    private WifiManager mWifiManager;
    private WifiStateReceiver mWifiStateReceiver;
    private Map<String, Integer> connectedWifiMap;
    private List<WifiConfiguration> connectedWifiList;

    private boolean isSavedPassword;            //当前wifi是否有过连接记录(已经记录密码)
    private boolean isConnectTheWifi;           //当前wifi是否是已连接wifi
    private boolean isLockedWifi = true;        //当前wifi是否是加密wifi

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_single_wifi);
        initView();


        if (isConnectTheWifi) {
            tv_wifi_connect1.setText("已连接");
            tv_wifi_connect2.setVisibility(View.GONE);
        }

        isSavedPassword = connectedWifiMap.containsKey(scanResult.SSID);
        if (isSavedPassword) {
            ll_password.setVisibility(View.GONE);
            ll_wifi_forget.setVisibility(View.VISIBLE);
        }

        String capabilities = scanResult.capabilities;
        if (capabilities != null)
            if (capabilities.trim().equals("") || capabilities.equals("[ESS]"))
                isLockedWifi = false;

        tv_wifi_name.setText(scanResult.SSID);
        switch (WifiManager.calculateSignalLevel(scanResult.level, 5)) {
            case 0:
                iv_wifi_level.setImageResource(R.drawable.unlocked_level_5);
                break;
            case 1:
                iv_wifi_level.setImageResource(R.drawable.unlocked_level_4);
                break;
            case 2:
                iv_wifi_level.setImageResource(R.drawable.unlocked_level_3);
                break;
            case 3:
                iv_wifi_level.setImageResource(R.drawable.unlocked_level_2);
                break;
            case 4:
                iv_wifi_level.setImageResource(R.drawable.unlocked_level_1);
                break;
        }

    }

    private void initView() {
        //获取控件
        iv_wifi_level = (ImageView) findViewById(R.id.iv_wifi_level);
        tv_wifi_name = (TextView) findViewById(R.id.tv_wifi_name);
        tv_wifi_connect1 = (TextView) findViewById(R.id.tv_wifi_connect1);
        tv_wifi_connect2 = (TextView) findViewById(R.id.tv_wifi_connect2);
        tv_wifi_password = (TextView) findViewById(R.id.tv_wifi_password);
        ll_password = (LinearLayout) findViewById(R.id.ll_password);
        ll_wifi_connect = (LinearLayout) findViewById(R.id.ll_wifi_connect);
        ll_wifi_forget = (LinearLayout) findViewById(R.id.ll_wifi_forget);

        mWifiManager = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        //获取传递的单条扫描wifi的信息
        scanResult = getIntent().getParcelableExtra("wifi_info");
        //当前wifi是否是现在连接的wifi
        isConnectTheWifi = getIntent().getBooleanExtra("isConnect", false);
        //获取有过连接记录的的wifi信息
        connectedWifiMap = new HashMap<>();
        connectedWifiList = mWifiManager.getConfiguredNetworks();
        for (WifiConfiguration obj : connectedWifiList) {
            connectedWifiMap.put(obj.SSID.replace("\"", ""), obj.networkId);
        }

        //注册wifi变化监听的广播
        mWifiStateReceiver = new WifiStateReceiver();
        IntentFilter mFilter = new IntentFilter();
        mFilter.addAction(WifiManager.RSSI_CHANGED_ACTION); //信号强度变化
        mFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION); //网络状态变化
        mFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION); //wifi状态，是否连上，密码
        mFilter.addAction(WifiManager.SUPPLICANT_STATE_CHANGED_ACTION); //是不是正在获得IP地址
        mFilter.addAction(WifiManager.NETWORK_IDS_CHANGED_ACTION);
        mFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
        registerReceiver(mWifiStateReceiver, mFilter);

        //控件点击事件
        ll_wifi_connect.setOnClickListener(l);
        ll_wifi_forget.setOnClickListener(l);
        ll_password.setOnClickListener(l);
    }

    /**
     * 点击事件
     */
    View.OnClickListener l = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            switch (v.getId()) {
                case R.id.ll_wifi_connect:
                    connectWifi();
                    break;
                case R.id.ll_password:
                    final EditText et = new EditText(WifiInfoActivity.this);
                    new AlertDialog.Builder(WifiInfoActivity.this).setTitle(scanResult.SSID)
                            .setIcon(android.R.drawable.ic_dialog_info)
                            .setView(et)
                            .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    String password = et.getText().toString();
                                    tv_wifi_password.setText(password);
                                    connectWifi();
                                }
                            })
                            .setNegativeButton("取消", null)
                            .show();
                    break;
                case R.id.ll_wifi_forget:
                    new AlertDialog.Builder(WifiInfoActivity.this).setTitle("删除网络")
                            .setMessage("是否删除此网络?")
                            .setPositiveButton("确定", new DialogInterface.OnClickListener() {//添加确定按钮
                                @Override
                                public void onClick(DialogInterface dialog, int which) {//确定按钮的响应事件
                                    int networkId = connectedWifiMap.get(scanResult.SSID);
                                    boolean b = mWifiManager.removeNetwork(networkId);
                                    boolean b1 = mWifiManager.saveConfiguration();
                                    Toast.makeText(WifiInfoActivity.this, b && b1 ? "删除成功" : "删除网络失败", Toast.LENGTH_SHORT).show();
                                    finish();
                                }
                            }).setNegativeButton("取消", new DialogInterface.OnClickListener() {//添加返回按钮
                        @Override
                        public void onClick(DialogInterface dialog, int which) {//响应事件
                            dialog.dismiss();
                            dialog.cancel();
                        }
                    }).show();
                    break;
            }
        }
    };

    /**
     * 连接wifi
     */
    private void connectWifi() {
        if (isConnectTheWifi) {
            Toast.makeText(this, "当前网络已连接", Toast.LENGTH_SHORT).show();
            return;
        }
        new AlertDialog.Builder(WifiInfoActivity.this).setTitle("连接网络")//设置对话框标题
                .setMessage(isSavedPassword ? "是否连接此网络?" : "是否连接新的网络?")//设置显示的内容
                .setPositiveButton("确定", new DialogInterface.OnClickListener() {//添加确定按钮
                    @Override
                    public void onClick(DialogInterface dialog, int which) {//确定按钮的响应事件
                        if (isSavedPassword) {//已经存储过密码的网络再次连接
                            int networkId = connectedWifiMap.get(scanResult.SSID);
                            mWifiManager.enableNetwork(networkId, true);
                            mWifiManager.saveConfiguration();
                            mWifiManager.reconnect();
                        } else {
                            String password = tv_wifi_password.getText().toString();
                            if (password.length() > 7) {
                                addNetWork(createWifiInfo(scanResult.SSID, password, isLockedWifi ? 3 : 1));
                            } else {
                                tv_wifi_connect2.setText("密码长度不匹配");
                            }
                        }
                    }
                }).setNegativeButton("取消", new DialogInterface.OnClickListener() {//添加返回按钮
            @Override
            public void onClick(DialogInterface dialog, int which) {//响应事件
                dialog.dismiss();
                dialog.cancel();
            }
        }).show();
    }

    private WifiConfiguration createWifiInfo(String SSID, String Password, int Type) {
        WifiConfiguration configuration = new WifiConfiguration();
        configuration.allowedAuthAlgorithms.clear();
        configuration.allowedGroupCiphers.clear();
        configuration.allowedKeyManagement.clear();
        configuration.allowedPairwiseCiphers.clear();
        configuration.allowedProtocols.clear();
        configuration.SSID = "\"" + SSID + "\"";

        WifiConfiguration tempConfig = this.isExsits(SSID);
        if (tempConfig != null) {
            mWifiManager.removeNetwork(tempConfig.networkId);
        }

        switch (Type) {
            case 1://不加密
                configuration.wepKeys[0] = "";
                configuration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
                configuration.wepTxKeyIndex = 0;
                configuration.priority = 20000;
                break;
            case 2://wep加密
                configuration.hiddenSSID = true;
                configuration.wepKeys[0] = "\"" + Password + "\"";
                configuration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);
                configuration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);

                break;
            case 3: //wpa加密
                configuration.preSharedKey = "\"" + Password + "\"";
                configuration.hiddenSSID = true;
                configuration.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);
                configuration.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);
                configuration.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
                configuration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
                configuration.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
                configuration.status = WifiConfiguration.Status.ENABLED;
                break;
        }
        return configuration;
    }

    private WifiConfiguration isExsits(String SSID) {
        List<WifiConfiguration> existingConfigs = mWifiManager.getConfiguredNetworks();
        for (WifiConfiguration existingConfig :
                existingConfigs) {
            if (existingConfig.SSID.equals("\"" + SSID + "\"")) {
                return existingConfig;
            }

        }
        return null;
    }

    public boolean addNetWork(WifiConfiguration wifiConfiguration) {
        int wcgID = mWifiManager.addNetwork(wifiConfiguration);
        Log.e("wcgID", wcgID + "true");
        mWifiManager.enableNetwork(wcgID, true);
        mWifiManager.saveConfiguration();
        mWifiManager.reconnect();
        return true;
    }

    class WifiStateReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            switch (action) {
                case WifiManager.RSSI_CHANGED_ACTION://信号强度变化
                    break;
                case WifiManager.NETWORK_STATE_CHANGED_ACTION:
                    NetworkInfo info = intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO);
                    if (info.getDetailedState().equals(NetworkInfo.DetailedState.DISCONNECTED)) {
                        //wifi已断开
                    } else if (info.getDetailedState().equals(NetworkInfo.DetailedState.CONNECTING)) {
                        //正在连接...
                        tv_wifi_connect2.setText("正在连接...");
                    } else if (info.getDetailedState().equals(NetworkInfo.DetailedState.CONNECTED)) {
                        //连接到网络
                        tv_wifi_connect2.setText("连接到网络");
                    } else if (info.getDetailedState().equals(NetworkInfo.DetailedState.OBTAINING_IPADDR)) {
                        //正在获取IP地址
                        tv_wifi_connect2.setText("正在获取IP地址...");
                    } else if (info.getDetailedState().equals(NetworkInfo.DetailedState.FAILED)) {
                        //连接失败
                        tv_wifi_connect2.setText("连接失败");
                    }

                    break;
                case WifiManager.WIFI_STATE_CHANGED_ACTION:
                    int wifiState = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE, 0);
                    switch (wifiState) {
                        case WifiManager.WIFI_STATE_ENABLING:
                            //wifi正在启用
                            break;
                        case WifiManager.WIFI_STATE_ENABLED:
                            //Wifi已启用
                            break;
                    }
                    break;
                case WifiManager.SUPPLICANT_STATE_CHANGED_ACTION:
                    int error = intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR, -100);
                    if (error == WifiManager.ERROR_AUTHENTICATING) {
                        //wifi密码认证错误！
                        tv_wifi_connect2.setText("密码认证错误！");
                    }
                    break;
                case WifiManager.NETWORK_IDS_CHANGED_ACTION:
                    //已经配置的网络的ID可能发生变化时
                    break;
                case ConnectivityManager.CONNECTIVITY_ACTION:
                    //连接状态发生变化，暂时没用到
                    int type = intent.getIntExtra(ConnectivityManager.EXTRA_NETWORK_TYPE, 0);
                    break;
                default:
                    break;
            }
        }
    }

    @Override
    protected void onDestroy() {
        unregisterReceiver(mWifiStateReceiver);
        super.onDestroy();
    }
}

